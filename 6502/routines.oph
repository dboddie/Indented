; routines.oph - Implementation of a simple virtual machine for the 6502 CPU.
;
; Copyright (C) 2014 David Boddie <david@boddie.org.uk>
;
; This program is free software: you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation, either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program.  If not, see <http://www.gnu.org/licenses/>.

.org $0e00

.alias current_frame        $70
.alias program_counter      $72
.alias stack_pointer        $74
.alias call_stack_pointer   $76
.alias size                 $78
.alias offset               $79
.alias ptr1                 $7a
.alias ptr2                 $7c
.alias instruction_low      $7e
.alias instruction_high     $7f
.alias temp                 $80

.alias sys_A                $82
.alias sys_X                $83
.alias sys_Y                $84

.alias true 255
.alias false 0

.alias address_size 2
.alias branch_size 1
.alias shift_size 1

; The program is included before the routines. The value and call stacks follow
; the routines.

lookup:
.byte <load_number, >load_number
.byte <compare_equals, >compare_equals
.byte <compare_not_equals, >compare_not_equals
.byte <compare_less_than, >compare_less_than
.byte <compare_greater_than, >compare_greater_than
.byte <add, >add
.byte <subtract, >subtract
.byte <multiply, >multiply
.byte <divide, >divide
.byte <logical_and, >logical_and
.byte <logical_or, >logical_or
.byte <logical_not, >logical_not
.byte <minus, >minus
.byte <bitwise_and, >bitwise_and
.byte <left_shift, >left_shift
.byte <right_shift, >right_shift
.byte <branch_forward_if_false, >branch_forward_if_false
.byte <branch_forward_if_true, >branch_forward_if_true
.byte <branch_forward, >branch_forward
.byte <branch_backward_if_false, >branch_backward_if_false
.byte <branch_backward_if_true, >branch_backward_if_true
.byte <branch_backward, >branch_backward
.byte <load_local, >load_local
.byte <load_global, >load_global
.byte <assign_local, >assign_local
.byte <function_return, >function_return
.byte <function_call, >function_call
.byte <load_current_frame_address, >load_current_frame_address
.byte <store_stack_top_in_current_frame, >store_stack_top_in_current_frame
.byte <allocate_stack_space, >allocate_stack_space
.byte <free_stack_space, >free_stack_space
.byte <pop_current_frame_address, >pop_current_frame_address
.byte <copy_value, >copy_value
.byte <system_call, >system_call
.byte <get_variable_address, >get_variable_address
.byte <load_array_value, >load_array_value
.byte <store_array_value, >store_array_value
.byte <end, >end

program:

.include "program.oph"

run:

    ; All the addresses of the routines should be in the same page, so we only
    ; need to set the high byte once.
    lda #$0e
    sta instruction_high

    lda #<program
    sta program_counter
    lda #>program
    sta [program_counter + 1]

    lda #<stack
    sta call_stack_pointer
    lda #>stack
    sta [call_stack_pointer + 1]

    lda #<stack
    adc #32
    sta current_frame
    sta stack_pointer
    lda #>stack
    adc #0
    sta [current_frame + 1]
    sta [stack_pointer + 1]
    clc

    next_instruction:

    ; The opcode is used as the low byte of the address into the lookup table.
    ; Copy this byte into the low byte of the instruction address register.
    jsr _get_instruction
    sta instruction_low         ; Store the low byte of the lookup table entry
                                ; address.

    ldy #0
    lda (instruction_low),y     ; Load the low byte of the routine address.
    sta temp                    ; Store the address in a fixed address.
    iny
    lda (instruction_low),y     ; Load the high byte of the routine address.
    sta [temp + 1]              ; Store the address in a fixed address.

    ; Jump to the address held by the temporary address.
    jmp (temp)

_push_byte:  ; A=value

    ldy #0
    sta (stack_pointer),y
    inc stack_pointer
    bne _push_byte_exit

    inc [stack_pointer + 1]

    _push_byte_exit:
    rts

_pop_byte:

    dec stack_pointer
    lda stack_pointer
    cmp #$ff
    bne _pop_byte_exit

    dec [stack_pointer + 1]

    _pop_byte_exit:
    ldy #0
    lda (stack_pointer),y
    clc
    rts

_push_call_byte: ; A=value

    ldy #0
    sta (call_stack_pointer),y
    inc call_stack_pointer
    bne _push_call_byte_exit

    inc [call_stack_pointer + 1]

    _push_call_byte_exit:
    rts

_pop_call_byte:

    dec call_stack_pointer
    lda call_stack_pointer
    cmp #$ff
    bne _pop_call_byte_exit

    dec [call_stack_pointer + 1]

    _pop_call_byte_exit:
    ldy #0
    lda (call_stack_pointer),y
    clc
    rts

_increment_program_counter:

    clc
    inc program_counter
    bne _increment_program_counter_exit
    
    inc [program_counter + 1]

    _increment_program_counter_exit:
    clc
    rts

_get_instruction:
_get_operand:

    ldy #0
    lda (program_counter),y
    pha
    jsr _increment_program_counter
    pla
    rts

; Instructions

load_number:

    jsr _get_operand
    sta size

    load_number_loop:

        dec size
        jsr _get_operand
        jsr _push_byte

        lda size
        cmp #0
        bne load_number_loop

    load_number_exit:
    clc
    jmp next_instruction

_set_ptr2:  ; ptr2 = stack_pointer - size

    sec
    lda stack_pointer
    sbc size
    sta ptr2
    lda [stack_pointer + 1]
    sbc #0
    sta [ptr2 + 1]
    clc
    rts

_set_ptr1:  ; ptr1 = ptr2 - A

    sec
    lda ptr2
    sbc size
    sta ptr1
    lda [ptr2 + 1]
    sbc #0
    sta [ptr1 + 1]
    clc
    rts

compare_equals:

    ;lda #61
    ;jsr $ffee

    jsr _get_operand
    sta size

    jsr _set_ptr2
    jsr _set_ptr1

    ldy #0
    compare_equals_loop:

        lda (ptr1),y
        cmp (ptr2),y
        beq compare_equals_loop_continue

            lda size
            asl
            jsr _free_stack_space
            lda #false
            jsr _push_byte
            jmp next_instruction

        compare_equals_loop_continue:
        iny
        cpy size
        bne compare_equals_loop

    compare_equals_loop_exit:
    clc

    lda size
    asl
    jsr _free_stack_space
    lda #true
    jsr _push_byte
    jmp next_instruction

compare_not_equals:

    ;lda #33
    ;jsr $ffee

    jsr _get_operand
    sta size

    jsr _set_ptr2
    jsr _set_ptr1

    ldy #0
    compare_not_equals_loop:

        lda (ptr1),y
        cmp (ptr2),y
        beq compare_not_equals_loop_continue

            lda size
            asl
            jsr _free_stack_space
            lda #true
            jsr _push_byte
            jmp next_instruction

        compare_not_equals_loop_continue:
        iny
        cpy size
        bne compare_not_equals_loop

    clc

    lda size
    asl
    jsr _free_stack_space
    lda #false
    jsr _push_byte
    jmp next_instruction

compare_less_than:

    jsr _get_operand
    sta size

    jsr _set_ptr2
    jsr _set_ptr1

    ldy size
    dey

    compare_less_than_loop:

        lda (ptr1),y
        cmp (ptr2),y
        bcs compare_less_than_loop_continue

            lda size
            asl
            jsr _free_stack_space
            lda #true
            jsr _push_byte
            jmp next_instruction

        compare_less_than_loop_continue:
        dey
        cpy #255
        bne compare_less_than_loop

    clc

    lda size
    asl
    jsr _free_stack_space
    lda #false
    jsr _push_byte
    jmp next_instruction

compare_greater_than:

    jsr _get_operand
    sta size

    jsr _set_ptr2
    jsr _set_ptr1

    ldy size
    dey

    compare_greater_than_loop:

        lda (ptr1),y
        cmp (ptr2),y
        bcc compare_greater_than_loop_continue
        beq compare_greater_than_loop_continue

            lda size
            asl
            jsr _free_stack_space
            lda #true
            jsr _push_byte
            jmp next_instruction

        compare_greater_than_loop_continue:
        dey
        cpy #255
        bne compare_greater_than_loop

    clc

    lda size
    asl
    jsr _free_stack_space
    lda #false
    jsr _push_byte
    jmp next_instruction

add:

    ;lda #43
    ;jsr $ffee

    jsr _get_operand
    sta size
    tax

    jsr _set_ptr2
    jsr _set_ptr1

    ldy #0
    add_loop:

        lda (ptr1),y
        adc (ptr2),y
        sta (ptr1),y

        iny
        dex
        bne add_loop

    clc

    lda size
    jsr _free_stack_space
    jmp next_instruction

subtract:

    ;lda #83
    ;jsr $ffee

    jsr _get_operand
    sta size
    tax

    jsr _set_ptr2
    jsr _set_ptr1

    ldy #0
    sec
    subtract_loop:

        lda (ptr1),y
        sbc (ptr2),y
        sta (ptr1),y

        iny
        dex
        bne subtract_loop

    clc

    lda size
    jsr _free_stack_space
    jmp next_instruction

multiply:

    brk

divide:

    brk

logical_and:

    jsr _pop_byte
    sta temp
    jsr _pop_byte
    and temp
    jsr _push_byte
    jmp next_instruction

logical_or:

    jsr _pop_byte
    sta temp
    jsr _pop_byte
    ora temp
    jsr _push_byte
    jmp next_instruction

logical_not:

    jsr _pop_byte
    eor #true
    jsr _push_byte
    jmp next_instruction

minus:

    brk

bitwise_and:

    jsr _get_operand
    sta temp            ; size1
    jsr _get_operand
    sta size            ; size2
    tax

    jsr _set_ptr2       ; ptr2 = stack_pointer - size2
    lda temp
    sta size
    jsr _set_ptr1       ; ptr1 = ptr2 - size1

    ldy #0
    bitwise_and_loop:

        lda (ptr1),y
        and (ptr2),y
        sta (ptr1),y

        iny
        dex
        bne bitwise_and_loop

    clc

    lda size                ; size1
    jsr _free_stack_space
    jmp next_instruction

left_shift:

    jsr _get_operand
    sta size
    tax                 ; Use the X register to keep track of the byte index.

    sec
    lda stack_pointer
    sbc #shift_size
    sta ptr2
    lda [stack_pointer + 1]
    sbc #0
    sta [ptr2 + 1]      ; ptr2 = stack_pointer - 1 (the shift value size)
    clc

    ldy #0
    lda (ptr2),y        ; Load the shift value.
    sta temp

    jsr _set_ptr1       ; Point to the value to shift.
    lda #0
    sta [temp + 1]      ; Initialise the value to carry between bytes.

    left_shift_loop:

        lda temp        ; Load the shift value.
        sta [temp + 2]  ; Make a working copy.
        lda #0
        sta [temp + 3]  ; Use an address to hold the overflow from the current
                        ; byte.

        left_shift_inner_loop:

            asl [temp + 3]  ; Shift the overflow from this byte.

            lda (ptr1),y    ; Shift the byte value.
            asl
            sta (ptr1),y

            bcc left_shift_inner_loop_next

            lda [temp + 3]
            ora #$01
            sta [temp + 3]

            left_shift_inner_loop_next:
            dec [temp + 2]
            bne left_shift_inner_loop

        lda (ptr1),y
        ora [temp + 1]  ; Combine the current byte with overflow from the
        sta (ptr1),y    ; previous one.

        lda [temp + 3]
        sta [temp + 1]  ; Record the new overflow.

        iny
        dex
        bne left_shift_loop

    clc

    lda #shift_size
    jsr _free_stack_space
    jmp next_instruction

right_shift:

    jsr _get_operand
    sta size
    tax                 ; Use the X register to keep track of the byte index.

    sec
    lda stack_pointer
    sbc #shift_size
    sta ptr2
    lda [stack_pointer + 1]
    sbc #0
    sta [ptr2 + 1]      ; ptr2 = stack_pointer - 1 (the shift value size)
    clc
    ldy #0
    lda (ptr2),y        ; Load the shift value.
    sta temp

    jsr _set_ptr1       ; Point to the value to shift.
    lda #0
    sta [temp + 1]      ; Initialise the value to carry between bytes.

    ldy size

    right_shift_loop:

        dey

        lda temp        ; Load the shift value.
        sta [temp + 2]  ; Make a working copy.
        lda #0
        sta [temp + 3]  ; Use an address to hold the overflow from the current
                        ; byte.

        right_shift_inner_loop:

            lsr [temp + 3]  ; Shift the overflow from this byte.

            lda (ptr1),y    ; Shift the byte value.
            lsr
            sta (ptr1),y

            bcc right_shift_inner_loop_next

            lda [temp + 3]
            ora #$80
            sta [temp + 3]

            right_shift_inner_loop_next:
            dec [temp + 2]
            bne right_shift_inner_loop

        lda (ptr1),y
        ora [temp + 1]  ; Combine the current byte with overflow from the
        sta (ptr1),y    ; previous one.

        lda [temp + 3]
        sta [temp + 1]  ; Record the new overflow.

        dex
        bne right_shift_loop

    clc

    lda #shift_size
    jsr _free_stack_space
    jmp next_instruction

branch_forward_if_false:

    ;lda #102
    ;jsr $ffee

    jsr _get_operand
    sta temp

    jsr _pop_byte
    cmp #false
    beq branch_forward_branch
    clc
    jmp next_instruction

branch_forward_if_true:

    jsr _get_operand
    sta temp
    
    jsr _pop_byte
    cmp #true
    beq branch_forward_branch
    clc
    jmp next_instruction

branch_forward:

    ;lda #70
    ;jsr $ffee

    jsr _get_operand
    sta temp

    branch_forward_branch:
    lda temp
    sec
    sbc #[1 + branch_size]
    sta temp
    clc

    lda program_counter
    adc temp
    sta program_counter
    lda [program_counter + 1]
    adc #0
    sta [program_counter + 1]
    clc
    jmp next_instruction

branch_backward_if_false:

    jsr _get_operand
    sta temp

    jsr _pop_byte
    cmp #false
    beq branch_backward_branch
    clc
    jmp next_instruction

branch_backward_if_true:

    jsr _get_operand
    sta temp
    
    jsr _pop_byte
    cmp #true
    beq branch_backward_branch
    clc
    jmp next_instruction

branch_backward:

    ;lda #66
    ;jsr $ffee

    jsr _get_operand
    sta temp

    branch_backward_branch:
    lda temp
    adc #[1 + branch_size]
    sta temp
    clc

    sec
    lda program_counter
    sbc temp
    sta program_counter
    lda [program_counter + 1]
    sbc #0
    sta [program_counter + 1]
    clc
    jmp next_instruction

load_local:

    ;lda #76
    ;jsr $ffee

    jsr _get_operand
    sta offset
    jsr _get_operand
    sta size

    lda current_frame
    adc offset
    sta ptr1
    lda [current_frame + 1]
    adc #0
    sta [ptr1 + 1]
    clc

    ldy #0
    load_local_loop:

        lda (ptr1),y
        sta (stack_pointer),y
        iny
        cpy size
        bne load_local_loop

    clc
    lda size
    jsr _allocate_stack_space
    jmp next_instruction

load_global:

    jsr _get_operand
    jsr _get_operand
    jmp next_instruction

assign_local:

    ;lda #65
    ;jsr $ffee

    jsr _get_operand
    sta offset
    jsr _get_operand
    sta size

    lda current_frame
    adc offset
    sta ptr1
    lda [current_frame + 1]
    adc #0
    sta [ptr1 + 1]
    clc

    jsr _set_ptr2

    ldy #0
    assign_local_loop:

        lda (ptr2),y
        sta (ptr1),y
        iny
        cpy size
        bne assign_local_loop

    clc
    lda size
    jsr _free_stack_space
    jmp next_instruction

function_return:

    ;lda #82
    ;jsr $ffee
    ;lda #110
    ;jsr $ffee

    jsr _pop_call_byte
    sta [program_counter + 1]
    jsr _pop_call_byte
    sta program_counter
    jmp next_instruction

function_call:

    ;lda #70
    ;jsr $ffee
    ;lda #110
    ;jsr $ffee

    jsr _get_operand
    sta temp
    jsr _get_operand
    sta [temp + 1]

    lda program_counter
    jsr _push_call_byte
    lda [program_counter + 1]
    jsr _push_call_byte
    nop

    lda temp
    sta program_counter
    lda [temp + 1]
    sta [program_counter + 1]
    jmp next_instruction

load_current_frame_address:

    ;lda #108
    ;jsr $ffee

    lda current_frame
    jsr _push_byte
    lda [current_frame + 1]
    jsr _push_byte
    jmp next_instruction

store_stack_top_in_current_frame:

    ;lda #115
    ;jsr $ffee

    jsr _get_operand
    sta size

    sec
    lda stack_pointer
    sbc size
    sta current_frame
    lda [stack_pointer + 1]
    sbc #0
    sta [current_frame + 1]
    clc
    jmp next_instruction

allocate_stack_space:

    ;lda #91
    ;jsr $ffee
    jsr _get_operand
    jsr _allocate_stack_space
    jmp next_instruction

_allocate_stack_space:  ; A=size

    adc stack_pointer
    sta stack_pointer
    lda [stack_pointer + 1]
    adc #0
    sta [stack_pointer + 1]
    clc
    rts

free_stack_space:

    ;lda #93
    ;jsr $ffee

    jsr _get_operand
    jsr _free_stack_space
    jmp next_instruction

_free_stack_space:  ; A=size

    sta temp
    sec
    lda stack_pointer
    sbc temp
    sta stack_pointer
    lda [stack_pointer + 1]
    sbc #0
    sta [stack_pointer + 1]
    clc
    rts

pop_current_frame_address:

    ;lda #80
    ;jsr $ffee

    jsr _pop_byte
    sta [current_frame + 1]
    jsr _pop_byte
    sta [current_frame]
    jmp next_instruction

copy_value:

    ;lda #67
    ;jsr $ffee

    jsr _get_operand
    sta offset
    jsr _get_operand
    sta size

    lda stack_pointer
    adc offset
    adc #address_size
    sta ptr1
    lda [stack_pointer + 1]
    adc #0
    sta [ptr1 + 1]
    clc

    ldy #0
    copy_value_loop:

        lda (ptr1),y
        sta (stack_pointer),y
        iny
        cpy size
        bne copy_value_loop

    clc
    lda size
    jsr _allocate_stack_space
    jmp next_instruction

system_call:

    jsr _get_operand
    sta size

    cmp #4
    beq system_call_read_4
    cmp #3
    beq system_call_read_3
    cmp #2
    beq system_call_read_2

    jsr _pop_byte
    sta sys_Y
    system_call_read_4:
    jsr _pop_byte
    sta sys_X
    system_call_read_3:
    jsr _pop_byte
    sta sys_A
    system_call_read_2:

    jsr _pop_byte
    sta [temp + 1]
    jsr _pop_byte
    sta temp

    lda sys_A
    ldx sys_X
    ldy sys_Y

    ; Call a subroutine that jumps directly into the system routine. When the
    ; system routine exits, it will return to the code after this instruction.
    jsr system_call_call

    ; Push the registers onto the stack.

    sty temp            ; Save Y because the _push_byte routine uses it.
    sta [temp + 1]

    bcc system_call_carry_clear
    clc
    lda #1
    jsr _push_byte      ; Push a value of 1 to indicate that carry was set.
    bcc system_call_push

    system_call_carry_clear:
    lda #0
    jsr _push_byte      ; Push a value of 0 to indicate that carry was clear.

    system_call_push:

    lda [temp + 1]
    jsr _push_byte      ; Push A.
    txa
    jsr _push_byte      ; Push X.
    lda temp            ; Recover the original Y register value.
    jsr _push_byte      ; Push Y.

    jmp next_instruction

system_call_call:   ; temp,temp+1=address of system routine

    jmp (temp)      ; returns to caller

get_variable_address:

    jsr _get_operand
    adc current_frame
    sta temp
    lda [current_frame + 1]
    adc #0
    sta [temp + 1]
    clc

    lda temp
    jsr _push_byte
    lda [temp + 1]
    jsr _push_byte

    jmp next_instruction

load_array_value:

    jsr _get_operand
    sta offset
    jsr _get_operand
    sta size                ; index size

    jsr _set_ptr2           ; Obtain the address of the index value given that
    ldy #0                  ; it is at the top of the stack.
    lda (ptr2),y
    sta [temp + 2]

    lda size
    sta temp

    jsr _free_stack_space   ; Discard the index value from the stack.

    jsr _get_operand
    sta size                ; element size

    jsr _calculate_array_element_address

    ldx size        ; element size
    lda #0
    sta [temp + 1]

    load_array_value_loop:

        ldy [temp + 1]
        lda ([temp + 2]),y
        jsr _push_byte

        inc [temp + 1]
        dex
        bne load_array_value_loop

    jmp next_instruction

store_array_value:

    jsr _get_operand
    sta offset
    jsr _get_operand
    sta temp                ; index size
    jsr _get_operand
    pha                     ; element size

    adc temp                ; index size + element size
    sta size
    sta [temp + 1]          ; Keep the total for later.

    jsr _set_ptr2           ; Obtain the address of the index value given that
    ldy #0                  ; it is below the assigned value at the top of the
    lda (ptr2),y            ; stack.
    sta [temp + 2]

    pla                     ; Restore the element size.
    sta size

    jsr _calculate_array_element_address

    jsr _set_ptr2           ; Obtain the address of the value on the stack.

    ldx size        ; element size
    ldy #0

    store_array_value_loop:

        lda (ptr2),y
        sta ([temp + 2]),y

        iny
        dex
        bne store_array_value_loop

    lda [temp + 1]          ; Free both the index and value from the stack.
    jsr _free_stack_space
    jmp next_instruction

_calculate_array_element_address:   ; Returns temp+2:temp+3=address of element
                                    ;         size=element size
                                    ;         temp=index size
    lda temp
    cmp #1
    beq load_array_index_value_1
    cmp #2
    beq load_array_index_value_2

    brk                     ; Any other index sizes are not handled.

    load_array_index_value_1:
    clc

    lda #0
    sta [temp + 3]          ; Load index.

    bcc calculate_index

    load_array_index_value_2:
    clc

    iny
    lda (ptr2),y
    sta [temp + 3]          ; Load index.

    calculate_index:

    lda size            ; Load element size (1, 2, 4).
    lsr                 ; Calculate the number of shifts required (0, 1, 2).
    tax

    cpx #0
    beq calculate_index_endloop

    calculate_index_loop:

        asl [temp + 2]
        bcc calculate_index_loop_continue

        asl [temp + 3]

        calculate_index_loop_continue:
        dex
        bne calculate_index_loop

    calculate_index_endloop:
    clc

    ; The value in temp+2:temp+3 is the index byte offset.

    lda [temp + 2]          ; Add the byte offset to the offset into the
    adc offset              ; current frame.
    sta [temp + 2]
    lda [temp + 3]
    adc #0
    sta [temp + 3]
    clc

    lda [temp + 2]          ; Calculate the address of the array element.
    adc current_frame
    sta [temp + 2]
    lda [temp + 3]
    adc [current_frame + 1]
    sta [temp + 3]
    clc

    rts

end:
    lda #69
    jsr $ffee
    lda #78
    jsr $ffee
    lda #68
    jsr $ffee
    clc
    rts

stack:
