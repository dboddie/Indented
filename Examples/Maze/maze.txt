def mode number (byte)
    _call(0xffee, 22)
    _call(0xffee, number)

def cursor_off
    _call(0xffee, 23)
    _call(0xffee, 1)
    i = 0
    while i < 8
        _call(0xffee, 0)
        i = i + 1

def vsync
    _call(0xfff4, 19)

def check_keys
    if _call(0xfff4, 129, -98, 255) == 0xffff8101
        return 1
    if _call(0xfff4, 129, -67, 255) == 0xffff8101
        return 2
    if _call(0xfff4, 129, -73, 255) == 0xffff8101
        return 3
    if _call(0xfff4, 129, -105, 255) == 0xffff8101
        return 4
    return 0

def oscli command_addr (int16)
    _call(0xfff7, 0, (command_addr & 0xff), (command_addr >> 8) & 0xff)

def load
    # Load sprites
    sprites_command = "LOAD SPRITES\r"
    oscli(_addr(sprites_command))

    routines_command = "LOAD ROUTINES\r"
    oscli(_addr(routines_command))

# Load the other files then change mode.

load()
mode(5)
cursor_off()

# Fill the playing area.

i = 0xad

y = 2
while y < 62

    j = i
    
    x = 2
    while x < 38
    
        if i & 2
            i = (i >> 1) | 0x80
        else
            i = (i ^ (y & 0xf8)) >> 1
        
        if (i & 1) == 0
            sprite = 1
        else
            sprite = 0
        
        sy = y
        while sy < y + 6
        
            sx = x
            while sx < x + 4
            
                _call(0x4000, sprite, sx, sy)
                sx = sx + 2
            
            sy = sy + 2
        
        x = x + 4
    
    y = y + 6

x = 19
y = 31
_call(0x4000, 2, x, y)

while True

    key = check_keys()
    
    if key != 0
    
        new_x = x
        new_y = y
        
        if (key == 1) and (x > 2)
            new_x = x - 1

        if (key == 2) and (x < 36)
            new_x = x + 1

        if (key == 3) and (y > 2)
            new_y = y - 1

        if (key == 4) and (y < 60)
            new_y = y + 1
        
        vsync()
        _call(0x4000, 0, x, y)
        _call(0x4000, 2, new_x, new_y)
        x = new_x
        y = new_y
